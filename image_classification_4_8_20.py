# -*- coding: utf-8 -*-
"""Image Classification 4.8.20

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k08C56ORmT_HsJeQvnpuK6w_k3qRAaS2
"""

# Description: This program classifies images

# Load the data 
from keras.datasets import cifar10
(x_train,y_train), (x_test,y_test) = cifar10.load_data()

# Print the data types 
print(type(x_train))
print(type(y_train))
print(type(x_test))
print(type(y_test))

# Get the shapes 
print('x_train shape: ', x_train.shape)
print('y_train shape: ', y_train.shape)
print('x_test shape: ', x_test.shape)
print('y_test shape: ', x_test.shape)

# Take a look at the first image (at index=0) in the training data set
x_train[0]

# Show image as picture
import matplotlib.pyplot as plt
img = plt.imshow(x_train[0])

# Print the label of the image 
print('The label is:', y_train[0])

#One-Hot Encoding: Convet the labels in to a set of 10 numbers to input into the neural network
from keras.utils import to_categorical
y_train_one_hot = to_categorical(y_train)
y_test_one_hot = to_categorical(y_test)

# Print the new labels in the training data set 
print(y_train_one_hot)

#Print an example of the new labels 
print('The one hot label is:', y_train_one_hot[0])

#Normalize the pixels in the images to be values between 0 and 1
x_train = x_train/255
x_test = x_test/255

# Build the CNN (Convolutional neural network)
import keras
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.layers import Dense, Flatten, Conv2D, MaxPooling2D

#Create the architecture
model = Sequential()

#Convolution layer
model.add( Conv2D(32, (5,5), activation='relu', input_shape=(32,32,3)) )

#MaxPooling layer
model.add( MaxPooling2D(pool_size=(2,2)))


#Convolution layer
model.add( Conv2D(32, (5,5), activation='relu') )

#MaxPooling layer (get the max elements; filter will reduce it 32-16)
model.add( MaxPooling2D(pool_size=(2,2)))

#Flatten layer (Making the image a linear rate to connect to neural network )
model.add( Flatten() )

# what is relu? ( rectifier linear unit; an activation function)
model.add( Dense(1000, activation='relu'))
model.add( Dense(10, activation='softmax'))

#Compile the model
model.compile(loss='categorial_crossentropy', optimizer ='adam', metrics=['accuracy'])

#Train the model 
hist = model.fit(x_train, y_train_one_hot, batch_size=256, epochs=10, validation_split=0.3)

#Get the models accuracy
model.evaluate(x_test, y_test_one_hot) [1]

#Visualize the models accuracy
plt.plot(hist.history['acc'])
plt.plot(hist.history['val_acc'])
plt.title('Model Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

#Visualize the models loss
plt.plot(hist.history['loss'])
plt.plot(hist.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper right')
plt.show()

#Load the image data
from google.colab import files
uploaded = files .upload()
my_image = plt.imread('cat.4014.jpg')

#Show the uploaded image
im = plt.imshow(my_image)

#Resize the image
from skimage.transform import resize
my_image_resized = resize(my_image, (32,32,3))
img = plt.imshow(my_image_resized)

#Get the probabilities for each class
import numpy as np
probabilities = model.predict( np.array( [my_image_resized,] ))

#Print the probabilities
probabilities

number_to_class = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck', ]
inde = np.argsort(probabilities [0,:])

print('Most likely class:', number_to_class[index[9]], '--probability:', probabilities[0, index[9]])
print('Second most likely class:', number_to_class[index[8]], '--probability:', probabilities[0, index[8]])
print('Third most likely class:', number_to_class[index[7]], '--probability:', probabilities[0, index[7]])
print('Forth most likely class:', number_to_class[index[6]], '--probability:', probabilities[0, index[6]])
print('Fifth most likely class:', number_to_class[index[5]], '--probability:', probabilities[0, index[5]])

#save the model 
model.save('my_model.h5')

#Load the model 
from keras.models import load_model
model = load_model('my_model.h5')

